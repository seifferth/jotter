#!/usr/bin/env python3

import sys
from jotter import *

def _pageiter():
    for f in fd():
        for p in pages(f):
            yield p
def _keyiter():
    for p in _pageiter():
        for k in ids(p):
            yield k
def notes() -> set:
    return set(_keyiter())
def dupes() -> dict[str,int]:
    keycounts = dict()
    for k in _keyiter():
        if k not in keycounts: keycounts[k] = 0
        keycounts[k] += 1
    return { k: v for k, v in keycounts.items() if v > 1 }
def _all_leafs() -> set:
    result = set()
    for p in _pageiter():
        if not cites(p):
            result.update(ids(p))
    return result
def _cited_ids() -> set:
    result = set()
    for p in _pageiter():
        result.update(cites(p))
    return result
def _all_roots() -> set:
    return notes().difference(_cited_ids())
def hermits() -> set:
    return _all_roots().intersection(_all_leafs())
def leafs() -> set:
    return _all_leafs().difference(hermits())
def roots() -> set:
    return _all_roots().difference(hermits())
def missing() -> set:
    return _cited_ids().difference(notes())
def graphs() -> list[set]:
    hs = hermits()
    gs = [ ids(p).union(cites(p)) for p in _pageiter()
           if not ids(p).intersection(hs) ]
    standalone_gs = []
    while gs:
        if len(gs) == 1: break
        g = gs.pop()
        for i in range(len(gs)):
            if gs[i].intersection(g):
                gs[i].update(g)
                g = None
                break
        if g: standalone_gs.append(g)
    return sorted(standalone_gs, key=lambda x: len(x))
def hubs() -> list[tuple[str,int]]:
    citecounts = dict()
    for p in _pageiter():
        if not ids(p): continue
        citecounts[sorted(ids(p))[0]] = len(cites(p))
    return sorted(citecounts.items(), key=lambda x: -x[1])

_cli_help = """
Usage: jotter-get [-h] [INFO]

Get a certain piece of information about the graph constituted
by the linked notes. INFO may be any of the following:

  notes         Get a list containing all keys used in this jotter,
                excluding missing notes.
  dupes         A list of duplicate ids that are used more than
                once in this jotter.
  roots         Notes with no incoming links from other notes,
                excluding hermit notes.
  leafs         Notes with no outgoing links to other notes,
                excluding hermit notes.
  hermits       Notes with neither incoming nor outgoing links
                to other notes.
  graphs        A summary of subgraphs that have no links between
                one another, excluding hermit notes.
  missing       Get a list of notes that are referenced but do not
                exist. I. e., the targets of broken links.
  hubs [-n N]   The 20 notes with the highest number of outgoing
                links. Only one id is reported per node. The -n
                option may be used to select a different number
                than 20.
  cites <KEY>   Print the citations found in the note with the
                specified KEY.
""".lstrip()

if __name__ == "__main__":
    if '-h' in sys.argv[1:] or '--help' in sys.argv[1:]:
        print(_cli_help)
        exit(0)
    if len(sys.argv) < 2:
        print('jotter-get takes at least one argument', file=sys.stderr)
        exit(1)
    def printsorted(keys: set):
        for k in sorted(keys):
            print(f'- @{k}')
    def printvalued(items: tuple[str,int], sortkey=lambda x: x, vformat='{}'):
        if items:
            klen = max((len(x[0]) for x in items))
            vlen = max((len(str(x[1])) for x in items))
            vformat = vformat.format('{:'+str(vlen)+'}')
        for k, v in sorted(items, key=sortkey):
            frame = '- @{:<'+str(klen)+'}  ['+vformat+']'
            print(frame.format(k, v))
    info = sys.argv[1]
    if   info == 'notes':       printsorted(notes())
    elif info == 'dupes':       printvalued(dupes().items(),
                                            sortkey=lambda x: (x[1], x[0]),
                                            vformat='used {} times')
    elif info == 'roots':       printsorted(roots())
    elif info == 'leafs':       printsorted(leafs())
    elif info == 'hermits':     printsorted(hermits())
    elif info == 'graphs':
        def graphdesc(max_i, i, notes, roots, leafs, missing):
            frame = '* Graph {:>'+str(len(str(max_i)))+'}  '\
                    '[{} note{}, {} missing, {} root{}, {} leaf{}]'
            return frame.format(
                i,
                notes, 's' if notes != 1 else '',
                missing,
                roots, 's' if roots != 1 else '',
                leafs, 's' if leafs != 1 else '',
            )
        def printsome(nodetype: str, nodes: list) -> None:
            if len(nodes) == 0: return
            elif len(nodes) == 1:
                print(f'    + {nodetype}: @{nodes[0]}')
            elif len(nodes) < 3:
                print(f'    + {nodetype}s:', ', '.join(
                                        (f'@{k}' for k in nodes)))
            else:
                print(f'    + {nodetype}s: @{nodes[0]}, @{nodes[1]}, '\
                      f'... [{len(nodes)-2} more]')
        gs = graphs()
        rs = roots()
        ls = leafs()
        ms = missing()
        for i, g in enumerate(gs, start=1):
            g_roots = g.intersection(rs)
            g_leafs = g.intersection(ls)
            g_missing = g.intersection(ms)
            print(graphdesc(len(gs), i, len(g), len(g_roots),
                            len(g_leafs), len(g_missing)))
            printsome('root', sorted(g_roots))
            printsome('leaf', sorted(g_leafs))
            notelabel = 'note' if len(g_roots)+len(g_leafs) == 0 \
                               else 'other note'
            printsome(notelabel, sorted(
                g.difference(g_roots).difference(g_leafs)
            ))
            if i < len(gs): print()
    elif info == 'missing':     printsorted(missing())
    elif info == 'hubs':
        if len(sys.argv) >= 3 and sys.argv[2].startswith('-n'):
            if sys.argv[2] == '-n': nhubs = int(sys.argv[3])
            else: nhubs = int(sys.argv[2][2:])
        else: nhubs = 20
        printvalued(hubs()[:nhubs] if nhubs >= 0 else hubs(),
                    sortkey=lambda x: (-x[1], x[0]),
                    vformat='{} links')
    elif info == 'cites':
        if len(sys.argv) != 3:
            print("'jotter get cites' requires exactly one "\
                  "KEY to be specified", file=sys.stderr); exit(1)
        for p in _pageiter():
            if sys.argv[2] in ids(p):
                for k in sorted(cites(p)):
                    print(f'- @{k}')
    else:
        print(f"Unsupported value for INFO '{info}'", file=sys.stderr)
        exit(1)
