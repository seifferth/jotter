#!/usr/bin/env python3

import sys
import os
import shutil
import re
import pypandoc
from jotter import find_jotter_root, survey


def clean_dir(path):
    if os.path.isdir(path):
        shutil.rmtree(path)
    os.mkdir(path)

def create_index(filename_map, citekey_map, keyword_map):
    """
    Return:     A string containing markdown content that is
                ready to be converted to html by pandoc.
    """
    index = list()
    index.append("\n\n\n# Notes\n\n\n")
    l = list()
    for doc in filename_map.values():
        if "bibtex" not in doc.keys(): # I. e. this is a note, not a summary
            l.append("- [{}]({})\n".format(doc["title"], doc["_html_filename"]))
    l.sort(key=lambda x: x.lower())
    index.extend(l)
    index.append("\n\n\n# Citekeys\n\n\n")
    l = list()
    for citekey, doc in citekey_map.items():
        if doc["type"] == "excerpt":
            l.append("- [{}]({})\n".format(citekey, doc["_html_filename"]))
    l.sort(key=lambda x: x.lower())
    index.extend(l)
    index.append("\n\n\n# Files\n\n\n")
    l = list()
    for doc in filename_map.values():
        l.append("- [{}]({})\n".format(
            doc["_filename"],
            doc["_html_filename"],
        ))
    l.sort(key=lambda x: x.lower())
    index.extend(l)
    index.append("\n\n\n# Keywords\n\n\n")
    keywords = list(keyword_map.keys())
    keywords.sort(key=lambda x: x.lower())
    for k in keywords:
        index.append("- {}\n".format(k))
        keyword_map[k].sort(key=lambda doc: doc["title"].lower())
        index.extend(map(
            lambda doc: "    - [{}]({})\n".format(
                doc["title"],
                doc["_html_filename"]
            ),
            keyword_map[k]
        ))
    return "".join(index)

def produce_html(doc, html_root, citekey_map=None, internal_links=False):
    pandoc_args = ["-s"]

    # Override certain keys that may be autogenerated by jotter-html
    # if not explicitly specified
    override_keys = [
        "title",
    ]
    for key in override_keys:
        if key in doc.keys():
            pandoc_args.append("--metadata={}:{}".format(key, doc[key]))

    outputfile = os.path.join(html_root, doc["_html_filename"])
    if "_content" in doc.keys():
        content = doc["_content"]
    else:
        with open(doc["_full_filename"]) as f:
            content = f.read()

    html = pypandoc.convert_text(
        source=doc["_content"],
        format="markdown",
        to="html",
        extra_args=pandoc_args,
    )
    # Make all links _blank before jotter_citeproc adds internal links
    if not internal_links:
        html = html.replace('<a href=', '<a target="_blank" href=')
    # Link citekeys to corresponding documents
    if citekey_map != None:
        html = jotter_citeproc(html, doc=doc, citekey_map=citekey_map)

    with open(outputfile, "w") as f:
        f.write(html)

def jotter_citeproc(html: str, doc: dict, citekey_map: dict) -> str:
    cite_frame = r'<span class="citation" data-cites="{}">{}</span>'
    regex = cite_frame.format(r'(.+?)', r'.+?')

    def replace(html, key, link=None):
        if link != None:
            html = re.sub(
                cite_frame.format(key, r'(.+?)'),
                r'<a href="{}">\1</a>'.format(link),
                html,
            )
        else:
            html = re.sub(
                cite_frame.format(key, r'(.+?)'),
                r'\1',
                html
            )
        return html.replace("--", "â€“")

    unk = set()
    for key in set(re.findall(regex, html)):
        if key[:4] in ["sec:","fig:","tbl:","lst:"] or key[:3] == "eq:":
            html = replace(html, key, link="#"+key)
        elif key in ["this", "unknown"]:
            html = replace(html, key)
        elif key in citekey_map.keys():
            if citekey_map[key] != doc:
                html = replace(
                    html, key,
                    link=citekey_map[key]["_html_filename"]
                )
            else:
                html = replace(html, key)
        else:
            html = replace(html, key)
            unk.add(key)
    if unk:
        print(
            "Unknown citekeys in {}".format(doc["_filename"]),
            file=sys.stderr
        )
        for key in unk:
            print("  - {}".format(key), file=sys.stderr)

    return html


if __name__ == "__main__":
    jotter_root = find_jotter_root()
    html_root = os.path.join(jotter_root, ".jotter", "static")
    if len(sys.argv) > 1 and sys.argv[1] in ["-c", "--clean"]:
        clean_dir(html_root)

    filename_map, citekey_map, keyword_map = survey(jotter_root)

    print("\rCreating index ...\r", end="")
    index = {
        "_content": create_index(filename_map, citekey_map, keyword_map),
        "_html_filename": "index.html",
        "title": "Jotter Index",
    }
    produce_html(index, html_root, internal_links=True)

    def needs_update(doc, html_root=html_root):
        html_filename = os.path.join(html_root, doc["_html_filename"])
        if not os.path.isfile(html_filename):
            return True
        md_time = os.path.getmtime(doc["_full_filename"])
        html_time = os.path.getmtime(html_filename)
        if md_time > html_time:
            return True
        return False

    for filename, doc in filename_map.items():
        shorthand = filename
        if len(shorthand) > 43:
            shorthand = shorthand[:6] + ".." + shorthand[-35:]
        fill = (43-len(shorthand)) * " "
        print(
            "\rConverting {} ...{}\r".format(shorthand, fill),
            end=""
        )
        if needs_update(doc, html_root=html_root):
            produce_html(doc, html_root, citekey_map=citekey_map)

    print("\rSuccessfully created static version in {}".format(html_root))
