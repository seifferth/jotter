#!/bin/sh

if test "$1" = "-h" || test "$1" = "--help"; then
cat <<EOF
Usage: jotter-tags [-h|--help] [--root DIR]

Write a ctags-like tags file with file references to bibliography
declarations. If remote jotters are linked into the local one, this
command will recursively create tags files for all those linked jotters.
This ensures that text editors always get the most recent information,
regardless of which tags file they use to locate a reference.

EOF
exit 0
fi

get_links() {
    cat .jotter/config | grep '^[ \t]*link[ \t]*' |
        sed 's,^[ \t]*link[ \t]*,,'
}
get_files() {
    get_links | while read link; do fd -ILe md . "$link"; done
    fd -ILe md
}

if test "$1" = "--root"; then
    cd "$2"; shift 2
else
    while true; do
        if test -d .jotter; then
            break
        elif test "$(pwd)" = "/"; then
            echo "No jotter root found" >&2
            exit 1
        else
            cd ..
        fi
    done
fi

get_links | while read link; do (cd "$link"; jotter tags); done

awk '
        ablock == 0 && bblock == 0 && /^```/    { ablock = 1; next }
        ablock == 0 && bblock == 0 && /^~~~/    { bblock = 1; next }
        ablock == 1 && /^```/                   { ablock = 0 }
        bblock == 1 && /^~~~/                   { bblock = 0 }
        ablock == 1                             { next }
        bblock == 1                             { next }

        /^---$/ && yaml == 0        { mayyaml = 1; next }
        mayyaml == 1 && /[^ \t]/    { yaml = 1 }
        mayyaml == 1                { mayyaml = 0 }
        /^---$/ && yaml == 1        { yaml = 0; next }
        /^\.\.\.$/ && yaml == 1     { yaml = 0; next }
        /^bibtex:/ && yaml == 1     { bibtex = 1; next }
        /^[^ ]/ && bibtex && yaml   { bibtex = 0; next }

        yaml && bibtex && $1 ~ /^@[^{]*{/ {
            tag = $1
            sub("^@[^{]*{", "", tag)
            sub(",$", "", tag)
            print tag"\t"FILENAME"\t/"$1
            next
        }

        !yaml && match($0, /{.*#(sec|fig|tbl|eq):[^ \t}]+.*}/, m) {
            match(m[0], /#(sec|fig|tbl|eq):[^ \t}]+/, n)
            sub(/^#/, "", n[0])
            print(n[0])"\t"FILENAME"\t/"m[0]
            next
        }
        !yaml && match($0, /^#.*({#([^ \t]+).*})/, m) {
            print m[2]"\t"FILENAME"\t/"m[1]
            next
        }

    ' $(get_files) | sort > tags
